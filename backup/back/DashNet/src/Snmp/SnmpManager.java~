package Snmp;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import org.snmp4j.CommunityTarget;
import org.snmp4j.PDU;
import org.snmp4j.Snmp;
import org.snmp4j.event.ResponseEvent;
import org.snmp4j.mp.SnmpConstants;
import org.snmp4j.smi.OID;
import org.snmp4j.smi.OctetString;
import org.snmp4j.smi.UdpAddress;
import org.snmp4j.smi.VariableBinding;
import org.snmp4j.transport.DefaultUdpTransportMapping;

public abstract class SnmpManager{

    private static final int MAX_REPETITIONS = 2500;
    private static final int MAX_SIZE_REQUEST_PDU = 65535;
    private static final String END = "endofmibview";
    
    private static int oidCnt; 
    private static int depth; 
    private static int hashCnt;
    private static int hitCnt;
    private static int keyCollisionCnt;
    private static int valueCollisionCnt;
    private static String address;
    private static String startOID;
    private static String last;
    private static String[] values;
    private static CommunityTarget target;
    private static Snmp snmp;
    private static PDU pdu, response;
    private static HashMap<String, String> hashMap;
    private static List<OID> oidList;
    private static OID[] oids; 
    private static OID[] keys;
    private static Thread t1;
    
    // Constructor
    public SnmpManager(String add) throws IOException{

        oidCnt = 0;
        depth = 0;
        hashCnt = 0;
        hitCnt = 0;
        keyCollisionCnt = 0;
        valueCollisionCnt = 0;
        address = add;
        hashMap = new HashMap();
        oids = new OID[999999];
        init();
        oidList = new ArrayList<>();
    }

    // Accessors
    public HashMap getHashMap(){ return hashMap; }
    public int getHashMapCnt(){ return hashCnt; }
    public String getLastOID(){ return last; }
    
    private static void init() throws IOException{

        getTarget();
        getSnmp();
    }

    private static void getTarget(){

        target = new CommunityTarget();
        target.setCommunity(new OctetString("txssc"));
        target.setVersion(SnmpConstants.version2c);
        target.setAddress(new UdpAddress("147.26.195.92/161"));
        target.setTimeout(5000);
        target.setRetries(3);
        target.setMaxSizeRequestPDU(65535);
    }

    private static void getSnmp() throws IOException{

        snmp = new Snmp(new DefaultUdpTransportMapping());
        snmp.listen();
    }

    private static void getPDU(String oid, int type){

        pdu = new PDU();
        pdu.setType(type);
        pdu.setMaxRepetitions(2500);
        pdu.setNonRepeaters(0);
        pdu.add(new VariableBinding(new OID(oid)));
    }

    private static void getResponse() throws IOException{

        ResponseEvent responseEvent = snmp.send(pdu, target);
        response = responseEvent.getResponse();
    }

    public static void stop() throws IOException{
        snmp.close();
    }

    
    class WalkCounts{

        public int requests;
        public int objects;
    }
}
